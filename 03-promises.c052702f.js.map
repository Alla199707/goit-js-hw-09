{"mappings":"gfAAA,IAAAA,EAAAC,EAAA,SAKA,SAASC,EAAcC,EAAUC,GAC/B,IAAMC,EAAgBC,KAAKC,SAAW,GACtC,OAAO,IAAIC,SAAQ,SAACC,EAASC,GAC3BC,YAAW,WACLN,EACFI,EAAQ,CAAEN,WAAUC,UAEpBM,EAAO,CAAEP,WAAUC,S,GAEpBA,E,IAbaQ,SAASC,cAAc,SAC/BC,iBAAiB,UA0B7B,SAAqBC,GACnBA,EAAIC,iBACJ,IAA8BC,EAAAC,OAAOC,YACnC,IAAIC,SAASL,EAAIM,gBADbC,EAAwBL,EAAxBb,MAAOmB,EAAiBN,EAAjBM,KAAMC,EAAWP,EAAXO,OAInB,IAAKA,IAAWD,IAASD,EAGR,YAFftB,EAAAyB,OAAOC,QAAS,oBAIlBF,EAASG,OAAOH,GAChBD,EAAOI,OAAOJ,GACdD,EAAQK,OAAOL,GAEf,IAAK,IAAIM,EAAI,EAAGA,EAAIJ,EAAQI,IAAK,CAE/B1B,EAAc0B,EAAI,EADCN,EAAQC,EAAOK,GAE/BC,MAAK,SAAAC,G,IAAG3B,EAAQ2B,EAAR3B,SAAUC,EAAK0B,EAAL1B,MACjBJ,EAAAyB,OAAOM,QAAQ,uBAAwCC,OAAf7B,EAAS,QAAY6B,OAAN5B,EAAM,M,IAG9D6B,OAAM,SAAAH,G,IAAG3B,EAAQ2B,EAAR3B,SAAUC,EAAK0B,EAAL1B,MAClBJ,EAAAyB,OAAOC,QAAQ,sBAAuCM,OAAf7B,EAAS,QAAY6B,OAAN5B,EAAM,M,QAhDpEQ,SAASC,cAAc,QAAQqB,MAAMC,gBAAkB,S","sources":["src/js/03-promises.js"],"sourcesContent":["import { Notify } from 'notiflix/build/notiflix-notify-aio';\nconst promiseForm = document.querySelector('.form');\npromiseForm.addEventListener('submit', callPromice);\ndocument.querySelector('body').style.backgroundColor = '#f7eff5';\n\nfunction createPromise(position, delay) {\n  const shouldResolve = Math.random() > 0.3;\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      if (shouldResolve) {\n        resolve({ position, delay });\n      } else {\n        reject({ position, delay });\n      }\n    }, delay);\n  });\n}\n\n// const onResolve = ({ position, delay }) => {\n//   //Notify.success(`✅ Fulfilled promise ${position} in ${delay}ms`);\n//   console.log(`✅ Fulfilled promise ${position} in ${delay}ms`);\n// };\n\n// const onRejected = ({ position, delay }) => {\n//  // Notify.failure(`❌ Rejected promise ${position} in ${delay}ms`);\n//   console.log(`❌ Rejected promise ${position} in ${delay}ms`);\n// };\n\nfunction callPromice(evt) {\n  evt.preventDefault();\n  let { delay, step, amount } = Object.fromEntries(\n    new FormData(evt.currentTarget)\n  );\n\n  if (!amount || !step || !delay) {\n    Notify.failure(`❌ Заповніть поля`);\n    //console.log(`❌ Заповніть поля`);\n    return;\n  }\n  amount = Number(amount);\n  step = Number(step);\n  delay = Number(delay);\n  // let promiseDelay = 0;\n  for (let i = 0; i < amount; i++) {\n    let promiseDelay = delay + step * i;\n    createPromise(i + 1, promiseDelay)\n      .then(({ position, delay }) => {\n        Notify.success(`✅ Fulfilled promise ${position} in ${delay}ms`);\n        //console.log(`✅ Fulfilled promise ${position} in ${delay}ms`);\n      })\n      .catch(({ position, delay }) => {\n        Notify.failure(`❌ Rejected promise ${position} in ${delay}ms`);\n        //console.log(`❌ Rejected promise ${position} in ${delay}ms`);\n      });\n  }\n}\n"],"names":["$h6c0i","parcelRequire","$ce04d3a99e08e73b$var$createPromise","position","delay","shouldResolve","Math","random","Promise","resolve","reject","setTimeout","document","querySelector","addEventListener","evt","preventDefault","ref","Object","fromEntries","FormData","currentTarget","delay1","step","amount","Notify","failure","Number","i","then","param","success","concat","catch","style","backgroundColor"],"version":3,"file":"03-promises.c052702f.js.map"}